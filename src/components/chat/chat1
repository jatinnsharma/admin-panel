import React, { useEffect, useRef, useState } from 'react';
import axios from 'axios';
import { useAuth } from '../../contexts/AuthContext';
import ScrollToBottom from 'react-scroll-to-bottom';

import { useParams } from 'react-router-dom';
import Message from './Message';
import TextMessage from './TextMessage';
import {io} from "socket.io-client"



const Chat = () => {
  const [messages, setMessages] = useState([]);
  const [chatId, setChatId] = useState(null); 
  const [newMessage, setNewMessage] = useState([]);
  const [currentChat,setCurrentChat] = useState(null);

  const [msg, setMsg] = useState([]); 
  const { user } = useAuth(); 
  const { userId } = useParams(); 
  const scrollRef = useRef();
 
  const [arrivalMessage, setArrivalMessage] = useState(null);
  const [onlineUsers, setOnlineUsers]  = useState([]);
  const socket = useRef()

  useEffect(()=>{
    socket.current = io('ws://localhost:8900')
    socket.current.on('getMessage',(data)=>{
      setArrivalMessage({ 
        sender:data.senderId,
        text:data.text,
        createdAt:Date.now()
      })
    })
  },[])

  useEffect(()=>{
    arrivalMessage && currentChat?.members.includes(arrivalMessage.sender) && setMsg((prev)=>[...prev,arrivalMessage])

  },[arrivalMessage,currentChat])
  
  useEffect(()=>{
    if(user){
      socket.current.emit("addUser",user._id)
      socket.current.on("getUsers",users=>{
        setOnlineUsers(users)
      })
    }
  },[user])

  const getData = async () => {
    try{
      if (!user) {
              console.error('User is null. Cannot fetch data.');
              return;
      }
        const res = await axios.get(`http://localhost:8000/api/v1/chat/${user._id}`)
        setMessages(res.data)
    }catch(error){
      console.log(error)
    }
  }
 
  useEffect(()=>{
    getData()
  },[user])

  
 const getMessages =  async () => {
  try{
    const res = await axios.get(`http://localhost:8000/api/v1/message/${currentChat?._id}`)
    console.log('getMesssage',res.data)
    setMsg(res.data)
  }catch(error){
    console.log(error)
  }

 }

 useEffect(()=>{
  getMessages()
},[currentChat])

const handleNewMessage = async (e) => {
   e.preventDefault()
   const message = {
    chatId : currentChat._id,
    senderId : user._id,
    text : newMessage,
   }
   
   const receiverId = currentChat.members.find((m) => m !== user?._id);

   socket.current.emit('sendMessage', {
      senderId:user._id,
      receiverId,
      text:newMessage
   })

   try {
      const res = await axios.post(`http://localhost:8000/api/v1/message`,message)
      setMsg([...msg,res.data])
      setNewMessage("")
   }catch(error){
    console.log(error)
   }
}




useEffect(()=>{
  scrollRef.current?.scrollIntoView({behavior : "smooth"})
},[msg])

  return !messages ? (
    <h1>Loading data</h1>
  ) : (
    <div className="flex justify-center items-center w-full h-screen bg-gray-100">
      <div className='flex w-5/6'>
      <div className="w-1/4 bg-gray-200 p-4">
      {messages.map((chat,index)=>{
        return (
          <div className="cursor-pointer p-2 hover:bg-gray-300" onClick={()=>setCurrentChat(chat)} >
            <Message chat={chat} currentUser={user} />
          </div>
        )
       })} 
      </div>
       <div className="w-3/4 bg-gray-300 p-4">
      <ScrollToBottom>
          {
            currentChat? (
            <>
             <div className="h-[70vh] overflow-y-auto">

              {
                msg.map((message,index)=>{ 
                  return(
                    <div key={index} ref={scrollRef}>
                      <TextMessage message={message} own={message.senderId===user._id}/>
                    </div>
                  )
                })
              }
             </div>

              <div className='flex justify-center items-center mt-4'>
                <input className="border p-2 w-4/5" type="text" onChange={(e)=>setNewMessage(e.target.value)} value={newMessage}/>
                <button className='ml-2 bg-green-500 text-white p-2 rounded' onClick={handleNewMessage}>Send</button>

              </div>
            </>) : (
            <>
              <span className="text-gray-500 ">Open a conversation to start a chat </span> 
            </>
            )
          }
      </ScrollToBottom>
       </div>
     </div>
    </div>
  );
};

export default Chat;